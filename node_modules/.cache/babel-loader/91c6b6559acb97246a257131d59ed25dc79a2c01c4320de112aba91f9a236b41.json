{"ast":null,"code":"import isPlainObject from 'lodash/isPlainObject.js';\n/**\n * Handles errors received from the server. Parses the error into a more useful\n * format, places it in an exception and throws it.\n * See https://www.contentful.com/developers/docs/references/errors/\n * for more details on the data received on the errorResponse.data property\n * and the expected error codes.\n * @private\n */\nexport default function errorHandler(errorResponse) {\n  const {\n    config,\n    response\n  } = errorResponse;\n  let errorName;\n  // Obscure the Management token\n  if (config && config.headers && config.headers['Authorization']) {\n    const token = `...${config.headers['Authorization'].toString().substr(-5)}`;\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  if (!isPlainObject(response) || !isPlainObject(config)) {\n    throw errorResponse;\n  }\n  const data = response?.data;\n  const errorData = {\n    status: response?.status,\n    statusText: response?.statusText,\n    message: '',\n    details: {}\n  };\n  if (config && isPlainObject(config)) {\n    errorData.request = {\n      url: config.url,\n      headers: config.headers,\n      method: config.method,\n      payloadData: config.data\n    };\n  }\n  if (data && typeof data === 'object') {\n    if ('requestId' in data) {\n      errorData.requestId = data.requestId || 'UNKNOWN';\n    }\n    if ('message' in data) {\n      errorData.message = data.message || '';\n    }\n    if ('details' in data) {\n      errorData.details = data.details || {};\n    }\n    errorName = data.sys?.id;\n  }\n  const error = new Error();\n  error.name = errorName && errorName !== 'Unknown' ? errorName : `${response?.status} ${response?.statusText}`;\n  try {\n    error.message = JSON.stringify(errorData, null, '  ');\n  } catch {\n    error.message = errorData?.message ?? '';\n  }\n  throw error;\n}","map":{"version":3,"names":["isPlainObject","errorHandler","errorResponse","config","response","errorName","headers","token","toString","substr","data","errorData","status","statusText","message","details","request","url","method","payloadData","requestId","sys","id","error","Error","name","JSON","stringify"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/ETA-TRADE/node_modules/contentful-sdk-core/dist/error-handler.js"],"sourcesContent":["import isPlainObject from 'lodash/isPlainObject.js';\n/**\n * Handles errors received from the server. Parses the error into a more useful\n * format, places it in an exception and throws it.\n * See https://www.contentful.com/developers/docs/references/errors/\n * for more details on the data received on the errorResponse.data property\n * and the expected error codes.\n * @private\n */\nexport default function errorHandler(errorResponse) {\n    const { config, response } = errorResponse;\n    let errorName;\n    // Obscure the Management token\n    if (config && config.headers && config.headers['Authorization']) {\n        const token = `...${config.headers['Authorization'].toString().substr(-5)}`;\n        config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    if (!isPlainObject(response) || !isPlainObject(config)) {\n        throw errorResponse;\n    }\n    const data = response?.data;\n    const errorData = {\n        status: response?.status,\n        statusText: response?.statusText,\n        message: '',\n        details: {},\n    };\n    if (config && isPlainObject(config)) {\n        errorData.request = {\n            url: config.url,\n            headers: config.headers,\n            method: config.method,\n            payloadData: config.data,\n        };\n    }\n    if (data && typeof data === 'object') {\n        if ('requestId' in data) {\n            errorData.requestId = data.requestId || 'UNKNOWN';\n        }\n        if ('message' in data) {\n            errorData.message = data.message || '';\n        }\n        if ('details' in data) {\n            errorData.details = data.details || {};\n        }\n        errorName = data.sys?.id;\n    }\n    const error = new Error();\n    error.name =\n        errorName && errorName !== 'Unknown' ? errorName : `${response?.status} ${response?.statusText}`;\n    try {\n        error.message = JSON.stringify(errorData, null, '  ');\n    }\n    catch {\n        error.message = errorData?.message ?? '';\n    }\n    throw error;\n}\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,yBAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,YAAYA,CAACC,aAAa,EAAE;EAChD,MAAM;IAAEC,MAAM;IAAEC;EAAS,CAAC,GAAGF,aAAa;EAC1C,IAAIG,SAAS;EACb;EACA,IAAIF,MAAM,IAAIA,MAAM,CAACG,OAAO,IAAIH,MAAM,CAACG,OAAO,CAAC,eAAe,CAAC,EAAE;IAC7D,MAAMC,KAAK,GAAG,MAAMJ,MAAM,CAACG,OAAO,CAAC,eAAe,CAAC,CAACE,QAAQ,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;IAC3EN,MAAM,CAACG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUC,KAAK,EAAE;EACvD;EACA,IAAI,CAACP,aAAa,CAACI,QAAQ,CAAC,IAAI,CAACJ,aAAa,CAACG,MAAM,CAAC,EAAE;IACpD,MAAMD,aAAa;EACvB;EACA,MAAMQ,IAAI,GAAGN,QAAQ,EAAEM,IAAI;EAC3B,MAAMC,SAAS,GAAG;IACdC,MAAM,EAAER,QAAQ,EAAEQ,MAAM;IACxBC,UAAU,EAAET,QAAQ,EAAES,UAAU;IAChCC,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE,CAAC;EACd,CAAC;EACD,IAAIZ,MAAM,IAAIH,aAAa,CAACG,MAAM,CAAC,EAAE;IACjCQ,SAAS,CAACK,OAAO,GAAG;MAChBC,GAAG,EAAEd,MAAM,CAACc,GAAG;MACfX,OAAO,EAAEH,MAAM,CAACG,OAAO;MACvBY,MAAM,EAAEf,MAAM,CAACe,MAAM;MACrBC,WAAW,EAAEhB,MAAM,CAACO;IACxB,CAAC;EACL;EACA,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAClC,IAAI,WAAW,IAAIA,IAAI,EAAE;MACrBC,SAAS,CAACS,SAAS,GAAGV,IAAI,CAACU,SAAS,IAAI,SAAS;IACrD;IACA,IAAI,SAAS,IAAIV,IAAI,EAAE;MACnBC,SAAS,CAACG,OAAO,GAAGJ,IAAI,CAACI,OAAO,IAAI,EAAE;IAC1C;IACA,IAAI,SAAS,IAAIJ,IAAI,EAAE;MACnBC,SAAS,CAACI,OAAO,GAAGL,IAAI,CAACK,OAAO,IAAI,CAAC,CAAC;IAC1C;IACAV,SAAS,GAAGK,IAAI,CAACW,GAAG,EAAEC,EAAE;EAC5B;EACA,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;EACzBD,KAAK,CAACE,IAAI,GACNpB,SAAS,IAAIA,SAAS,KAAK,SAAS,GAAGA,SAAS,GAAG,GAAGD,QAAQ,EAAEQ,MAAM,IAAIR,QAAQ,EAAES,UAAU,EAAE;EACpG,IAAI;IACAU,KAAK,CAACT,OAAO,GAAGY,IAAI,CAACC,SAAS,CAAChB,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC;EACzD,CAAC,CACD,MAAM;IACFY,KAAK,CAACT,OAAO,GAAGH,SAAS,EAAEG,OAAO,IAAI,EAAE;EAC5C;EACA,MAAMS,KAAK;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}