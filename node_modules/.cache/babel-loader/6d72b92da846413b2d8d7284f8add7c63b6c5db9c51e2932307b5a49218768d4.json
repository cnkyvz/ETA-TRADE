{"ast":null,"code":"import copy from 'fast-copy';\nimport qs from 'qs';\nimport asyncToken from './async-token.js';\nimport rateLimitRetry from './rate-limit.js';\nimport rateLimitThrottle from './rate-limit-throttle.js';\n// Matches 'sub.host:port' or 'host:port' and extracts hostname and port\n// Also enforces toplevel domain specified, no spaces and no protocol\nconst HOST_REGEX = /^(?!\\w+:\\/\\/)([^\\s:]+\\.?[^\\s:]+)(?::(\\d+))?(?!:)$/;\nfunction copyHttpClientParams(options) {\n  const copiedOptions = copy(options);\n  // httpAgent and httpsAgent cannot be copied because they can contain private fields\n  copiedOptions.httpAgent = options.httpAgent;\n  copiedOptions.httpsAgent = options.httpsAgent;\n  return copiedOptions;\n}\n/**\n * Create pre-configured axios instance\n * @private\n * @param {AxiosStatic} axios - Axios library\n * @param {CreateHttpClientParams} options - Initialization parameters for the HTTP client\n * @return {AxiosInstance} Initialized axios instance\n */\nexport default function createHttpClient(axios, options) {\n  const defaultConfig = {\n    insecure: false,\n    retryOnError: true,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    logHandler: (level, data) => {\n      if (level === 'error' && data) {\n        const title = [data.name, data.message].filter(a => a).join(' - ');\n        console.error(`[error] ${title}`);\n        console.error(data);\n        return;\n      }\n      console.log(`[${level}] ${data}`);\n    },\n    // Passed to axios\n    headers: {},\n    httpAgent: false,\n    httpsAgent: false,\n    timeout: 30000,\n    throttle: 0,\n    basePath: '',\n    adapter: undefined,\n    maxContentLength: 1073741824,\n    // 1GB\n    maxBodyLength: 1073741824 // 1GB\n  };\n  const config = {\n    ...defaultConfig,\n    ...options\n  };\n  if (!config.accessToken) {\n    const missingAccessTokenError = new TypeError('Expected parameter accessToken');\n    config.logHandler('error', missingAccessTokenError);\n    throw missingAccessTokenError;\n  }\n  // Construct axios baseURL option\n  const protocol = config.insecure ? 'http' : 'https';\n  const space = config.space ? `${config.space}/` : '';\n  let hostname = config.defaultHostname;\n  let port = config.insecure ? 80 : 443;\n  if (config.host && HOST_REGEX.test(config.host)) {\n    const parsed = config.host.split(':');\n    if (parsed.length === 2) {\n      ;\n      [hostname, port] = parsed;\n    } else {\n      hostname = parsed[0];\n    }\n  }\n  // Ensure that basePath does start but not end with a slash\n  if (config.basePath) {\n    config.basePath = `/${config.basePath.split('/').filter(Boolean).join('/')}`;\n  }\n  const baseURL = options.baseURL || `${protocol}://${hostname}:${port}${config.basePath}/spaces/${space}`;\n  if (!config.headers.Authorization && typeof config.accessToken !== 'function') {\n    config.headers.Authorization = 'Bearer ' + config.accessToken;\n  }\n  const axiosOptions = {\n    // Axios\n    baseURL,\n    headers: config.headers,\n    httpAgent: config.httpAgent,\n    httpsAgent: config.httpsAgent,\n    proxy: config.proxy,\n    timeout: config.timeout,\n    adapter: config.adapter,\n    maxContentLength: config.maxContentLength,\n    maxBodyLength: config.maxBodyLength,\n    paramsSerializer: {\n      serialize: params => {\n        return qs.stringify(params);\n      }\n    },\n    // Contentful\n    logHandler: config.logHandler,\n    responseLogger: config.responseLogger,\n    requestLogger: config.requestLogger,\n    retryOnError: config.retryOnError\n  };\n  const instance = axios.create(axiosOptions);\n  instance.httpClientParams = options;\n  /**\n   * Creates a new axios instance with the same default base parameters as the\n   * current one, and with any overrides passed to the newParams object\n   * This is useful as the SDKs use dependency injection to get the axios library\n   * and the version of the library comes from different places depending\n   * on whether it's a browser build or a node.js build.\n   * @private\n   * @param {CreateHttpClientParams} newParams - Initialization parameters for the HTTP client\n   * @return {AxiosInstance} Initialized axios instance\n   */\n  instance.cloneWithNewParams = function (newParams) {\n    return createHttpClient(axios, {\n      ...copyHttpClientParams(options),\n      ...newParams\n    });\n  };\n  /**\n   * Apply interceptors.\n   * Please note that the order of interceptors is important\n   */\n  if (config.onBeforeRequest) {\n    instance.interceptors.request.use(config.onBeforeRequest);\n  }\n  if (typeof config.accessToken === 'function') {\n    asyncToken(instance, config.accessToken);\n  }\n  if (config.throttle) {\n    rateLimitThrottle(instance, config.throttle);\n  }\n  rateLimitRetry(instance, config.retryLimit);\n  if (config.onError) {\n    instance.interceptors.response.use(response => response, config.onError);\n  }\n  return instance;\n}","map":{"version":3,"names":["copy","qs","asyncToken","rateLimitRetry","rateLimitThrottle","HOST_REGEX","copyHttpClientParams","options","copiedOptions","httpAgent","httpsAgent","createHttpClient","axios","defaultConfig","insecure","retryOnError","logHandler","level","data","title","name","message","filter","a","join","console","error","log","headers","timeout","throttle","basePath","adapter","undefined","maxContentLength","maxBodyLength","config","accessToken","missingAccessTokenError","TypeError","protocol","space","hostname","defaultHostname","port","host","test","parsed","split","length","Boolean","baseURL","Authorization","axiosOptions","proxy","paramsSerializer","serialize","params","stringify","responseLogger","requestLogger","instance","create","httpClientParams","cloneWithNewParams","newParams","onBeforeRequest","interceptors","request","use","retryLimit","onError","response"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/ETA-TRADE/node_modules/contentful-sdk-core/dist/create-http-client.js"],"sourcesContent":["import copy from 'fast-copy';\nimport qs from 'qs';\nimport asyncToken from './async-token.js';\nimport rateLimitRetry from './rate-limit.js';\nimport rateLimitThrottle from './rate-limit-throttle.js';\n// Matches 'sub.host:port' or 'host:port' and extracts hostname and port\n// Also enforces toplevel domain specified, no spaces and no protocol\nconst HOST_REGEX = /^(?!\\w+:\\/\\/)([^\\s:]+\\.?[^\\s:]+)(?::(\\d+))?(?!:)$/;\nfunction copyHttpClientParams(options) {\n    const copiedOptions = copy(options);\n    // httpAgent and httpsAgent cannot be copied because they can contain private fields\n    copiedOptions.httpAgent = options.httpAgent;\n    copiedOptions.httpsAgent = options.httpsAgent;\n    return copiedOptions;\n}\n/**\n * Create pre-configured axios instance\n * @private\n * @param {AxiosStatic} axios - Axios library\n * @param {CreateHttpClientParams} options - Initialization parameters for the HTTP client\n * @return {AxiosInstance} Initialized axios instance\n */\nexport default function createHttpClient(axios, options) {\n    const defaultConfig = {\n        insecure: false,\n        retryOnError: true,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        logHandler: (level, data) => {\n            if (level === 'error' && data) {\n                const title = [data.name, data.message].filter((a) => a).join(' - ');\n                console.error(`[error] ${title}`);\n                console.error(data);\n                return;\n            }\n            console.log(`[${level}] ${data}`);\n        },\n        // Passed to axios\n        headers: {},\n        httpAgent: false,\n        httpsAgent: false,\n        timeout: 30000,\n        throttle: 0,\n        basePath: '',\n        adapter: undefined,\n        maxContentLength: 1073741824, // 1GB\n        maxBodyLength: 1073741824, // 1GB\n    };\n    const config = {\n        ...defaultConfig,\n        ...options,\n    };\n    if (!config.accessToken) {\n        const missingAccessTokenError = new TypeError('Expected parameter accessToken');\n        config.logHandler('error', missingAccessTokenError);\n        throw missingAccessTokenError;\n    }\n    // Construct axios baseURL option\n    const protocol = config.insecure ? 'http' : 'https';\n    const space = config.space ? `${config.space}/` : '';\n    let hostname = config.defaultHostname;\n    let port = config.insecure ? 80 : 443;\n    if (config.host && HOST_REGEX.test(config.host)) {\n        const parsed = config.host.split(':');\n        if (parsed.length === 2) {\n            ;\n            [hostname, port] = parsed;\n        }\n        else {\n            hostname = parsed[0];\n        }\n    }\n    // Ensure that basePath does start but not end with a slash\n    if (config.basePath) {\n        config.basePath = `/${config.basePath.split('/').filter(Boolean).join('/')}`;\n    }\n    const baseURL = options.baseURL || `${protocol}://${hostname}:${port}${config.basePath}/spaces/${space}`;\n    if (!config.headers.Authorization && typeof config.accessToken !== 'function') {\n        config.headers.Authorization = 'Bearer ' + config.accessToken;\n    }\n    const axiosOptions = {\n        // Axios\n        baseURL,\n        headers: config.headers,\n        httpAgent: config.httpAgent,\n        httpsAgent: config.httpsAgent,\n        proxy: config.proxy,\n        timeout: config.timeout,\n        adapter: config.adapter,\n        maxContentLength: config.maxContentLength,\n        maxBodyLength: config.maxBodyLength,\n        paramsSerializer: {\n            serialize: (params) => {\n                return qs.stringify(params);\n            },\n        },\n        // Contentful\n        logHandler: config.logHandler,\n        responseLogger: config.responseLogger,\n        requestLogger: config.requestLogger,\n        retryOnError: config.retryOnError,\n    };\n    const instance = axios.create(axiosOptions);\n    instance.httpClientParams = options;\n    /**\n     * Creates a new axios instance with the same default base parameters as the\n     * current one, and with any overrides passed to the newParams object\n     * This is useful as the SDKs use dependency injection to get the axios library\n     * and the version of the library comes from different places depending\n     * on whether it's a browser build or a node.js build.\n     * @private\n     * @param {CreateHttpClientParams} newParams - Initialization parameters for the HTTP client\n     * @return {AxiosInstance} Initialized axios instance\n     */\n    instance.cloneWithNewParams = function (newParams) {\n        return createHttpClient(axios, {\n            ...copyHttpClientParams(options),\n            ...newParams,\n        });\n    };\n    /**\n     * Apply interceptors.\n     * Please note that the order of interceptors is important\n     */\n    if (config.onBeforeRequest) {\n        instance.interceptors.request.use(config.onBeforeRequest);\n    }\n    if (typeof config.accessToken === 'function') {\n        asyncToken(instance, config.accessToken);\n    }\n    if (config.throttle) {\n        rateLimitThrottle(instance, config.throttle);\n    }\n    rateLimitRetry(instance, config.retryLimit);\n    if (config.onError) {\n        instance.interceptors.response.use((response) => response, config.onError);\n    }\n    return instance;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}