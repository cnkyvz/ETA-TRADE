{"ast":null,"code":"import _wrapRegExp from \"/Applications/XAMPP/xamppfiles/htdocs/ETA-TRADE/node_modules/@babel/runtime/helpers/esm/wrapRegExp.js\";\nimport isString from 'lodash/isString.js';\nimport pThrottle from 'p-throttle';\nimport { noop } from './utils.js';\nconst PERCENTAGE_REGEX = /*#__PURE__*/_wrapRegExp(/(\\d+)(%)/, {\n  value: 1\n});\nfunction calculateLimit(type) {\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7;\n  let limit = max;\n  if (PERCENTAGE_REGEX.test(type)) {\n    var _type$match;\n    const groups = (_type$match = type.match(PERCENTAGE_REGEX)) === null || _type$match === void 0 ? void 0 : _type$match.groups;\n    if (groups && groups.value) {\n      const percentage = parseInt(groups.value) / 100;\n      limit = Math.round(max * percentage);\n    }\n  }\n  return Math.min(30, Math.max(1, limit));\n}\nfunction createThrottle(limit, logger) {\n  logger('info', \"Throttle request to \".concat(limit, \"/s\"));\n  return pThrottle({\n    limit,\n    interval: 1000,\n    strict: false\n  });\n}\nexport default (function (axiosInstance) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n  const {\n    logHandler = noop\n  } = axiosInstance.defaults;\n  let limit = isString(type) ? calculateLimit(type) : calculateLimit('auto', type);\n  let throttle = createThrottle(limit, logHandler);\n  let isCalculated = false;\n  let requestInterceptorId = axiosInstance.interceptors.request.use(config => {\n    return throttle(() => config)();\n  }, function (error) {\n    return Promise.reject(error);\n  });\n  const responseInterceptorId = axiosInstance.interceptors.response.use(response => {\n    if (!isCalculated && isString(type) && (type === 'auto' || PERCENTAGE_REGEX.test(type)) && response.headers && response.headers['x-contentful-ratelimit-second-limit']) {\n      const rawLimit = parseInt(response.headers['x-contentful-ratelimit-second-limit']);\n      const nextLimit = calculateLimit(type, rawLimit);\n      if (nextLimit !== limit) {\n        if (requestInterceptorId) {\n          axiosInstance.interceptors.request.eject(requestInterceptorId);\n        }\n        limit = nextLimit;\n        throttle = createThrottle(nextLimit, logHandler);\n        requestInterceptorId = axiosInstance.interceptors.request.use(config => {\n          return throttle(() => config)();\n        }, function (error) {\n          return Promise.reject(error);\n        });\n      }\n      isCalculated = true;\n    }\n    return response;\n  }, function (error) {\n    return Promise.reject(error);\n  });\n  return () => {\n    axiosInstance.interceptors.request.eject(requestInterceptorId);\n    axiosInstance.interceptors.response.eject(responseInterceptorId);\n  };\n});","map":{"version":3,"names":["isString","pThrottle","noop","PERCENTAGE_REGEX","_wrapRegExp","value","calculateLimit","type","max","arguments","length","undefined","limit","test","_type$match","groups","match","percentage","parseInt","Math","round","min","createThrottle","logger","concat","interval","strict","axiosInstance","logHandler","defaults","throttle","isCalculated","requestInterceptorId","interceptors","request","use","config","error","Promise","reject","responseInterceptorId","response","headers","rawLimit","nextLimit","eject"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/ETA-TRADE/node_modules/contentful-sdk-core/dist/rate-limit-throttle.js"],"sourcesContent":["import isString from 'lodash/isString.js';\nimport pThrottle from 'p-throttle';\nimport { noop } from './utils.js';\nconst PERCENTAGE_REGEX = /(?<value>\\d+)(%)/;\nfunction calculateLimit(type, max = 7) {\n    let limit = max;\n    if (PERCENTAGE_REGEX.test(type)) {\n        const groups = type.match(PERCENTAGE_REGEX)?.groups;\n        if (groups && groups.value) {\n            const percentage = parseInt(groups.value) / 100;\n            limit = Math.round(max * percentage);\n        }\n    }\n    return Math.min(30, Math.max(1, limit));\n}\nfunction createThrottle(limit, logger) {\n    logger('info', `Throttle request to ${limit}/s`);\n    return pThrottle({\n        limit,\n        interval: 1000,\n        strict: false,\n    });\n}\nexport default (axiosInstance, type = 'auto') => {\n    const { logHandler = noop } = axiosInstance.defaults;\n    let limit = isString(type) ? calculateLimit(type) : calculateLimit('auto', type);\n    let throttle = createThrottle(limit, logHandler);\n    let isCalculated = false;\n    let requestInterceptorId = axiosInstance.interceptors.request.use((config) => {\n        return throttle(() => config)();\n    }, function (error) {\n        return Promise.reject(error);\n    });\n    const responseInterceptorId = axiosInstance.interceptors.response.use((response) => {\n        if (!isCalculated &&\n            isString(type) &&\n            (type === 'auto' || PERCENTAGE_REGEX.test(type)) &&\n            response.headers &&\n            response.headers['x-contentful-ratelimit-second-limit']) {\n            const rawLimit = parseInt(response.headers['x-contentful-ratelimit-second-limit']);\n            const nextLimit = calculateLimit(type, rawLimit);\n            if (nextLimit !== limit) {\n                if (requestInterceptorId) {\n                    axiosInstance.interceptors.request.eject(requestInterceptorId);\n                }\n                limit = nextLimit;\n                throttle = createThrottle(nextLimit, logHandler);\n                requestInterceptorId = axiosInstance.interceptors.request.use((config) => {\n                    return throttle(() => config)();\n                }, function (error) {\n                    return Promise.reject(error);\n                });\n            }\n            isCalculated = true;\n        }\n        return response;\n    }, function (error) {\n        return Promise.reject(error);\n    });\n    return () => {\n        axiosInstance.interceptors.request.eject(requestInterceptorId);\n        axiosInstance.interceptors.response.eject(responseInterceptorId);\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}