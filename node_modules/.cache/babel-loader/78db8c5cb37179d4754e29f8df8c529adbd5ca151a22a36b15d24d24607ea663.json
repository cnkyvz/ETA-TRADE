{"ast":null,"code":"import { noop } from './utils.js';\nconst delay = ms => new Promise(resolve => {\n  setTimeout(resolve, ms);\n});\nconst defaultWait = attempts => {\n  return Math.pow(Math.SQRT2, attempts);\n};\nexport default function rateLimit(instance) {\n  let maxRetry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  const {\n    responseLogger = noop,\n    requestLogger = noop\n  } = instance.defaults;\n  instance.interceptors.request.use(function (config) {\n    requestLogger(config);\n    return config;\n  }, function (error) {\n    requestLogger(error);\n    return Promise.reject(error);\n  });\n  instance.interceptors.response.use(function (response) {\n    // we don't need to do anything here\n    responseLogger(response);\n    return response;\n  }, async function (error) {\n    const {\n      response\n    } = error;\n    const {\n      config\n    } = error;\n    responseLogger(error);\n    // Do not retry if it is disabled or no request config exists (not an axios error)\n    if (!config || !instance.defaults.retryOnError) {\n      return Promise.reject(error);\n    }\n    // Retried already for max attempts\n    const doneAttempts = config.attempts || 1;\n    if (doneAttempts > maxRetry) {\n      error.attempts = config.attempts;\n      return Promise.reject(error);\n    }\n    let retryErrorType = null;\n    let wait = defaultWait(doneAttempts);\n    // Errors without response did not receive anything from the server\n    if (!response) {\n      retryErrorType = 'Connection';\n    } else if (response.status >= 500 && response.status < 600) {\n      // 5** errors are server related\n      retryErrorType = \"Server \".concat(response.status);\n    } else if (response.status === 429) {\n      // 429 errors are exceeded rate limit exceptions\n      retryErrorType = 'Rate limit';\n      // all headers are lowercased by axios https://github.com/mzabriskie/axios/issues/413\n      if (response.headers && error.response.headers['x-contentful-ratelimit-reset']) {\n        wait = response.headers['x-contentful-ratelimit-reset'];\n      }\n    }\n    if (retryErrorType) {\n      // convert to ms and add jitter\n      wait = Math.floor(wait * 1000 + Math.random() * 200 + 500);\n      instance.defaults.logHandler('warning', \"\".concat(retryErrorType, \" error occurred. Waiting for \").concat(wait, \" ms before retrying...\"));\n      // increase attempts counter\n      config.attempts = doneAttempts + 1;\n      /* Somehow between the interceptor and retrying the request the httpAgent/httpsAgent gets transformed from an Agent-like object\n       to a regular object, causing failures on retries after rate limits. Removing these properties here fixes the error, but retry\n       requests still use the original http/httpsAgent property */\n      delete config.httpAgent;\n      delete config.httpsAgent;\n      return delay(wait).then(() => instance(config));\n    }\n    return Promise.reject(error);\n  });\n}","map":{"version":3,"names":["noop","delay","ms","Promise","resolve","setTimeout","defaultWait","attempts","Math","pow","SQRT2","rateLimit","instance","maxRetry","arguments","length","undefined","responseLogger","requestLogger","defaults","interceptors","request","use","config","error","reject","response","retryOnError","doneAttempts","retryErrorType","wait","status","concat","headers","floor","random","logHandler","httpAgent","httpsAgent","then"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/ETA-TRADE/node_modules/contentful-sdk-core/dist/rate-limit.js"],"sourcesContent":["import { noop } from './utils.js';\nconst delay = (ms) => new Promise((resolve) => {\n    setTimeout(resolve, ms);\n});\nconst defaultWait = (attempts) => {\n    return Math.pow(Math.SQRT2, attempts);\n};\nexport default function rateLimit(instance, maxRetry = 5) {\n    const { responseLogger = noop, requestLogger = noop } = instance.defaults;\n    instance.interceptors.request.use(function (config) {\n        requestLogger(config);\n        return config;\n    }, function (error) {\n        requestLogger(error);\n        return Promise.reject(error);\n    });\n    instance.interceptors.response.use(function (response) {\n        // we don't need to do anything here\n        responseLogger(response);\n        return response;\n    }, async function (error) {\n        const { response } = error;\n        const { config } = error;\n        responseLogger(error);\n        // Do not retry if it is disabled or no request config exists (not an axios error)\n        if (!config || !instance.defaults.retryOnError) {\n            return Promise.reject(error);\n        }\n        // Retried already for max attempts\n        const doneAttempts = config.attempts || 1;\n        if (doneAttempts > maxRetry) {\n            error.attempts = config.attempts;\n            return Promise.reject(error);\n        }\n        let retryErrorType = null;\n        let wait = defaultWait(doneAttempts);\n        // Errors without response did not receive anything from the server\n        if (!response) {\n            retryErrorType = 'Connection';\n        }\n        else if (response.status >= 500 && response.status < 600) {\n            // 5** errors are server related\n            retryErrorType = `Server ${response.status}`;\n        }\n        else if (response.status === 429) {\n            // 429 errors are exceeded rate limit exceptions\n            retryErrorType = 'Rate limit';\n            // all headers are lowercased by axios https://github.com/mzabriskie/axios/issues/413\n            if (response.headers && error.response.headers['x-contentful-ratelimit-reset']) {\n                wait = response.headers['x-contentful-ratelimit-reset'];\n            }\n        }\n        if (retryErrorType) {\n            // convert to ms and add jitter\n            wait = Math.floor(wait * 1000 + Math.random() * 200 + 500);\n            instance.defaults.logHandler('warning', `${retryErrorType} error occurred. Waiting for ${wait} ms before retrying...`);\n            // increase attempts counter\n            config.attempts = doneAttempts + 1;\n            /* Somehow between the interceptor and retrying the request the httpAgent/httpsAgent gets transformed from an Agent-like object\n             to a regular object, causing failures on retries after rate limits. Removing these properties here fixes the error, but retry\n             requests still use the original http/httpsAgent property */\n            delete config.httpAgent;\n            delete config.httpsAgent;\n            return delay(wait).then(() => instance(config));\n        }\n        return Promise.reject(error);\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}