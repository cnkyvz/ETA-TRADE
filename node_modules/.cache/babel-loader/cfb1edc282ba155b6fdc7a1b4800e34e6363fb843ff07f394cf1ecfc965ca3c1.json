{"ast":null,"code":"import process from 'process';\nimport { isNode, getNodeVersion, isReactNative, getWindow } from './utils.js';\nfunction getBrowserOS() {\n  const win = getWindow();\n  if (!win) {\n    return null;\n  }\n  const userAgent = win.navigator.userAgent;\n  // TODO: platform is deprecated.\n  const platform = win.navigator.platform;\n  const macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'];\n  const windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'];\n  const iosPlatforms = ['iPhone', 'iPad', 'iPod'];\n  if (macosPlatforms.indexOf(platform) !== -1) {\n    return 'macOS';\n  } else if (iosPlatforms.indexOf(platform) !== -1) {\n    return 'iOS';\n  } else if (windowsPlatforms.indexOf(platform) !== -1) {\n    return 'Windows';\n  } else if (/Android/.test(userAgent)) {\n    return 'Android';\n  } else if (/Linux/.test(platform)) {\n    return 'Linux';\n  }\n  return null;\n}\nfunction getNodeOS() {\n  const platform = process.platform || 'linux';\n  const version = process.version || '0.0.0';\n  const platformMap = {\n    android: 'Android',\n    aix: 'Linux',\n    darwin: 'macOS',\n    freebsd: 'Linux',\n    linux: 'Linux',\n    openbsd: 'Linux',\n    sunos: 'Linux',\n    win32: 'Windows'\n  };\n  if (platform in platformMap) {\n    return \"\".concat(platformMap[platform] || 'Linux', \"/\").concat(version);\n  }\n  return null;\n}\nexport default function getUserAgentHeader(sdk, application, integration, feature) {\n  const headerParts = [];\n  if (application) {\n    headerParts.push(\"app \".concat(application));\n  }\n  if (integration) {\n    headerParts.push(\"integration \".concat(integration));\n  }\n  if (feature) {\n    headerParts.push('feature ' + feature);\n  }\n  headerParts.push(\"sdk \".concat(sdk));\n  let platform = null;\n  try {\n    if (isReactNative()) {\n      platform = getBrowserOS();\n      headerParts.push('platform ReactNative');\n    } else if (isNode()) {\n      platform = getNodeOS();\n      headerParts.push(\"platform node.js/\".concat(getNodeVersion()));\n    } else {\n      platform = getBrowserOS();\n      headerParts.push('platform browser');\n    }\n  } catch (e) {\n    platform = null;\n  }\n  if (platform) {\n    headerParts.push(\"os \".concat(platform));\n  }\n  return \"\".concat(headerParts.filter(item => item !== '').join('; '), \";\");\n}","map":{"version":3,"names":["process","isNode","getNodeVersion","isReactNative","getWindow","getBrowserOS","win","userAgent","navigator","platform","macosPlatforms","windowsPlatforms","iosPlatforms","indexOf","test","getNodeOS","version","platformMap","android","aix","darwin","freebsd","linux","openbsd","sunos","win32","concat","getUserAgentHeader","sdk","application","integration","feature","headerParts","push","e","filter","item","join"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/ETA-TRADE/node_modules/contentful-sdk-core/dist/get-user-agent.js"],"sourcesContent":["import process from 'process';\nimport { isNode, getNodeVersion, isReactNative, getWindow } from './utils.js';\nfunction getBrowserOS() {\n    const win = getWindow();\n    if (!win) {\n        return null;\n    }\n    const userAgent = win.navigator.userAgent;\n    // TODO: platform is deprecated.\n    const platform = win.navigator.platform;\n    const macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'];\n    const windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'];\n    const iosPlatforms = ['iPhone', 'iPad', 'iPod'];\n    if (macosPlatforms.indexOf(platform) !== -1) {\n        return 'macOS';\n    }\n    else if (iosPlatforms.indexOf(platform) !== -1) {\n        return 'iOS';\n    }\n    else if (windowsPlatforms.indexOf(platform) !== -1) {\n        return 'Windows';\n    }\n    else if (/Android/.test(userAgent)) {\n        return 'Android';\n    }\n    else if (/Linux/.test(platform)) {\n        return 'Linux';\n    }\n    return null;\n}\nfunction getNodeOS() {\n    const platform = process.platform || 'linux';\n    const version = process.version || '0.0.0';\n    const platformMap = {\n        android: 'Android',\n        aix: 'Linux',\n        darwin: 'macOS',\n        freebsd: 'Linux',\n        linux: 'Linux',\n        openbsd: 'Linux',\n        sunos: 'Linux',\n        win32: 'Windows',\n    };\n    if (platform in platformMap) {\n        return `${platformMap[platform] || 'Linux'}/${version}`;\n    }\n    return null;\n}\nexport default function getUserAgentHeader(sdk, application, integration, feature) {\n    const headerParts = [];\n    if (application) {\n        headerParts.push(`app ${application}`);\n    }\n    if (integration) {\n        headerParts.push(`integration ${integration}`);\n    }\n    if (feature) {\n        headerParts.push('feature ' + feature);\n    }\n    headerParts.push(`sdk ${sdk}`);\n    let platform = null;\n    try {\n        if (isReactNative()) {\n            platform = getBrowserOS();\n            headerParts.push('platform ReactNative');\n        }\n        else if (isNode()) {\n            platform = getNodeOS();\n            headerParts.push(`platform node.js/${getNodeVersion()}`);\n        }\n        else {\n            platform = getBrowserOS();\n            headerParts.push('platform browser');\n        }\n    }\n    catch (e) {\n        platform = null;\n    }\n    if (platform) {\n        headerParts.push(`os ${platform}`);\n    }\n    return `${headerParts.filter((item) => item !== '').join('; ')};`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}